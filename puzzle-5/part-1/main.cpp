#include <iostream>
#include <fstream>
#include <string>
#include <vector>

void getSeeds(std::vector<long long> &, std::ifstream &);
void getMap(std::vector<std::vector<long long>> &, std::ifstream &);
long long getMapOutput(std::vector<std::vector<long long>> &, long long);
void printMap(std::vector<std::vector<long long>> &);

int main(){
    std::string file_name = "../../../puzzle-5.txt";
    std::vector<long long> seeds;
    std::vector<std::vector<long long>> map_seed2soil;
    std::vector<std::vector<long long>> map_soil2fert;
    std::vector<std::vector<long long>> map_fert2water;
    std::vector<std::vector<long long>> map_water2light;
    std::vector<std::vector<long long>> map_light2temp;
    std::vector<std::vector<long long>> map_temp2humidity;
    std::vector<std::vector<long long>> map_humidity2location;

    std::string line;
    std::ifstream file(file_name);

    //fill vector<long long> seeds with the list of seeds
    getSeeds(seeds, file);

    getMap(map_seed2soil, file);
    printMap(map_seed2soil);
    /*getMap(map_soil2fert, file);
    getMap(map_fert2water, file);
    getMap(map_water2light, file);
    getMap(map_light2temp, file);
    getMap(map_temp2humidity, file);
    getMap(map_humidity2location, file);*/

    long long location;
    long long smallest_location = LLONG_MAX;
    for(auto seed: seeds){
        location = getMapOutput(map_humidity2location, 
                   getMapOutput(map_temp2humidity, 
                   getMapOutput(map_light2temp, 
                   getMapOutput(map_water2light, 
                   getMapOutput(map_fert2water, 
                   getMapOutput(map_soil2fert,
                   getMapOutput(map_seed2soil, seed)))))));
        if(location < smallest_location) smallest_location = location;
    }


    //figure out a method for breaking apart the mapping data into an algorithm

    std::cout << smallest_location << std::endl;
    //system("pause");
    return 0;
}


void getSeeds(std::vector<long long> &arr, std::ifstream &file){
    //generate the first line containing the list of seeds
    std::string line;
    std::getline(file, line);

    //create and initialize three iterator values pointing to the start of the numbers
    auto itr = std::next(line.begin(),7);
    auto start = itr;
    auto end = itr;

    /*
    go position to position on the string, if the value the iterator is pointing at is 
    the " " space delimiter, then push that long long number into the vector
    */
    while(itr != line.end()){
        if(!isdigit(*itr)){
            end = itr; //updated end to the current iterator position
            arr.push_back(stoll(std::string(start, end))); //push the long long generated by stoll (string to long long)
            start = itr + 1; //update the start to be the iterator after the current iterator
        }
        itr++; //update the driving iterator
    }
    end = line.end(); //update the end to the end of the string
    arr.push_back(stoll(std::string(start, end))); //capture the next long long integer value
    
    return;
}

void getMap(std::vector<std::vector<long long>> &map, std::ifstream &file){
    std::string line;
    bool data_flag = false; //false until a number is found
    while(!data_flag){
        std::getline(file, line);
        if(isdigit(line[0])) data_flag = true;
    }

    std::vector<long long> temp; //temp place to store the individual values from the line
    //add iterators to help pull the numbers from the line
    auto itr = line.begin();
    auto start = itr;
    auto end = itr;
    while(data_flag){
        while(itr != line.end()){
            if(!isdigit(*itr)){
                end = itr; //updated end to the current iterator position
                temp.push_back(stoll(std::string(start, end))); //push the long long generated by stoll (string to long long)
                start = itr + 1; //update the start to be the iterator after the current iterator
            }
            itr++; //update the driving iterator
        }
        end = line.end();
        temp.push_back(stoll(std::string(start, end)));
        map.push_back(temp);
        temp.clear();

        //Process up here, get line on next iteration
        if(std::getline(file, line)){
            if(!isdigit(line[0])) data_flag = false;
            itr = line.begin();
            start = itr;
            end = itr;
        }else{
            data_flag = false;
        }
    }
    return;
}

long long getMapOutput(std::vector<std::vector<long long>> &map, long long input){
    return 0;
}

void printMap(std::vector<std::vector<long long>> &map){
    for(int i = 0; i < map.size(); i++){
        for(int j = 0; j < map[0].size(); i++){
            std::cout << map[i][j] << std::endl;
        }
    }
}